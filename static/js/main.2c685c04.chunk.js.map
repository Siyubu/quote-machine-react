{"version":3,"sources":["QuoteDB.js","components/QuoteAndAuthor.js","App.js","serviceWorker.js","index.js"],"names":["quotes","QuoteAndAuthor","props","quote","generateRandomQuote","className","author","onClick","type","class","window","open","encodeURIComponent","App","state","newQuote","Math","floor","random","length","setState","shuffleQuotes","arr","sort","this","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNA6BeA,EA7BA,CACX,CACI,MAAS,kFACT,OAAU,WAEd,CACI,MAAS,sCACT,OAAU,uBAGd,CACI,MAAS,0JACT,OAAU,gBAEd,CACI,MAAS,iGACT,OAAU,WAEd,CACI,MAAS,gJACT,OAAU,gBAEd,CACI,MAAS,yDACT,OAAU,YCrBH,SAASC,EAAeC,GAAQ,IAEnCC,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,oBACf,OACI,qBAAKC,UAAU,OAAf,SAEI,sBAAKA,UAAU,YAAf,UACI,mBAAGA,UAAU,YAAb,SAA0BF,EAAMA,QAChC,qBAAIE,UAAU,aAAd,eAA8BF,EAAMG,UACpC,yBAAQD,UAAU,kBACdE,QAAS,WAAQH,EAAoBJ,IACrCQ,KAAK,SAFT,UAGI,mBAAGC,MAAM,iBAHb,qBAIA,yBACIJ,UAAU,oBACVE,QAAS,WACLH,EAAoBJ,GACpBU,OAAOC,KAAK,0CAA4CC,mBAAmBT,EAAMA,MAAQ,KAAOA,EAAMG,UAE1GE,KAAK,SANT,UAMkB,mBAAGC,MAAM,mBAN3B,uB,ICZKI,E,4MAEpBC,MAAM,CACJX,MAAMH,EAAO,GAAGG,MAChBG,OAAQN,EAAO,GAAGM,Q,EAGpBF,oBAAsB,SAACJ,GACrB,IACIe,EAASf,EADHgB,KAAKC,MAAMD,KAAKE,SAASlB,EAAOmB,SAE1C,EAAKC,SAAS,CACZjB,MAAOY,EAASZ,MAChBG,OAAQS,EAAST,SAEnB,EAAKe,cAAcrB,I,EAGnBqB,cAAgB,SAACC,GAChB,OAAOA,EAAIC,MAAK,WAAc,MAAO,GAAMP,KAAKE,a,uDAGhD,OACE,sBAAKb,UAAU,YAAf,UACE,oBAAIA,UAAU,cAAd,0BACA,cAACJ,EAAD,CACEG,oBAAqBoB,KAAKpB,oBAC1BD,MAAOqB,KAAKV,e,GA1BWW,aCQbC,QACa,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c685c04.chunk.js","sourcesContent":["const quotes = [\r\n    {\r\n        \"quote\": \"Forget all the reasons why it won't work and believe the one reason why it will\",\r\n        \"author\": \"Unknown\"\r\n    },\r\n    {\r\n        \"quote\": \"Always do what you are afraid to do\",\r\n        \"author\": \"Ralph Waldo Emerson\"\r\n    },\r\n\r\n    {\r\n        \"quote\": \"Don’t be intimidated by what you don’t know. That can be your greatest strength and ensure that you do things differently from everyone else.\",\r\n        \"author\": \"Sara Blakely\"\r\n    },\r\n    {\r\n        \"quote\": \"If you keep on doing what you've always done, you will keep getting what you've always gotten.\",\r\n        \"author\": \"Unknown\"\r\n    },\r\n    {\r\n        \"quote\": \" For God so loved the world that he gave his one and only Son, that whoever believes in him shall not perish but have eternal life. John 3:16\",\r\n        \"author\": \"Jesus Christ\"\r\n    },\r\n    {\r\n        \"quote\": \"The surest way to find your dream job is to create it.\",\r\n        \"author\": \"Unknown\"\r\n\r\n    }\r\n]\r\n\r\nexport default quotes;\r\n","import React from 'react'\r\nimport quotes from '../QuoteDB'\r\n\r\nexport default function QuoteAndAuthor(props) {\r\n\r\n    const { quote, generateRandomQuote } = props;\r\n    return (\r\n        <div className=\"card\" >\r\n\r\n            <div className=\"card-body\">\r\n                <p className=\"card-text\">{quote.quote}</p>\r\n                <h5 className=\"card-title\">- {quote.author}</h5>\r\n                <button className=\"btn btn-primary\"\r\n                    onClick={() => { generateRandomQuote(quotes) }}\r\n                    type=\"submit\">\r\n                    <i class=\"fas fa-mouse\"></i> Generate Quote</button>\r\n                <button \r\n                    className=\"ml-3 btn btn-info\"\r\n                    onClick={() => {\r\n                        generateRandomQuote(quotes);\r\n                        window.open('https://twitter.com/intent/tweet/?text=' + encodeURIComponent(quote.quote + '--' + quote.author))\r\n                    }}\r\n                    type=\"submit\"><i class=\"fab fa-twitter\"></i> Share Quote</button>\r\n            </div>\r\n        </div>\r\n        );\r\n    }","import React, {Component} from 'react'\nimport QuoteAndAuthor from './components/QuoteAndAuthor';\nimport quotes from './QuoteDB';\n\nexport default class App extends Component {\n // state\n state={\n   quote:quotes[0].quote,\n   author: quotes[0].author\n }\n //generate diffrent quote function\n generateRandomQuote = (quotes) =>{\n   let num = Math.floor(Math.random()*quotes.length)\n   let newQuote=quotes[num]\n   this.setState({\n     quote: newQuote.quote,\n     author: newQuote.author\n   })\n   this.shuffleQuotes(quotes)\n }\n   //shuufle quotes function\n   shuffleQuotes = (arr) => {\n    return arr.sort(function () { return 0.5 - Math.random() });\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"text-center\">Random Quote</h1>\n        <QuoteAndAuthor\n          generateRandomQuote={this.generateRandomQuote}\n          quote={this.state}\n        />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}